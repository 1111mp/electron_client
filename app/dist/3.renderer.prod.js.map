{"version":3,"sources":["webpack:///./app/renderer-process/index.ts","webpack:///./app/components/BasicComponent.tsx","webpack:///./app/components/browser/index.tsx","webpack:///./app/utils/index.ts"],"names":["this","_allEvents","window","Object","defineProperty","get","remote","getCurrentWindow","getInstance","_instance","RendererProcess","bindWinEvents","isBind","_win","win","method","forEach","event","e","_onWindowStatusChanged","geCurrentWin","_electron","send","channel","args","ipcRenderer","on","cb","isOnce","Error","remove","removeListener","removeAll","keys","isResizable","setResizable","setMovable","isMovalble","minimize","maximize","unmaximize","setMaximumSize","width","height","setSize","getSize","setPosition","x","y","getPosition","setFullScreen","isFull","hide","close","destroyed","listener","injectUnmount","target","next","prototype","componentWillUnmount","apply","_unmount","setState","props","$send","$renderer","$on","$once","$remove","$bindWinEvents","$onWindowStatusChanged","$alert","message","title","data","Promise","resolve","reject","DIALOG_SHOW","type","DIALOG_CONFIRM","$confirm","DIALOG_CANCEL","$addUrlQuery","url","query","addSearch","queryStr","key","search","test","substr","length","$open","id","CUSTOM_WIN_SHOW","$openBrowser","BROWSER_OPEN_URL","$hide","$minimize","$maximize","$setMaximumSize","$unmaximize","$close","$setFullScreen","$geCurrentWin","$setSize","$getSize","$setPosition","$getPosition","componentDidMount","didMount","componentDidUpdate","didUpdate","render","$render","willUnmount","$loadScript","timeout","head","document","querySelector","elScript","createElement","loadFinished","src","onload","removeChild","clearTimeout","appendChild","setTimeout","BasicComponent","TabGroup","state","iscrollInstance","activeWebView","isMaximized","canGoBack","canGoForward","openUrl","tabGroup","addTab","active","ready","tab","initTabWebView","tabInstance","webview","refresh","initIscroll","addEventListener","setTitle","getTitle","insertCSS","scrollToElement","console","log","then","iscroll","IScroll","default","refs","mouseWheel","scrollX","preventDefault","setMaximize","flag","renderHistory","className","style","marginRight","onMouseDown","onClick","renderController","group","tabs","ref","QUERY_REGEXP","SPLIT_QUERY_REGEXP","getLocationSearch","queryMergeToStr","location","href","obj","matchQuery","match","matchTarget","getQueryObj","str","v","assign","queryMergeToObj","queryParse","parse"],"mappings":"iJAIA,WAkBE,aACEA,KAAKC,WAAa,GAGI,oBAAXC,SAGXC,OAAOC,eAAeJ,KAAM,OAAQ,CAClCK,IAAG,WAED,OADQ,cAAAC,OACMC,sBAIlBJ,OAAOC,eAAeJ,KAAM,YAAa,CACvCK,IAAG,WACD,OAAO,EAAQ,gBAyQvB,OAvSS,EAAAG,YAAP,WAKE,OAJKR,KAAKS,YACRT,KAAKS,UAAY,IAAIC,GAGhBV,KAAKS,WAmCd,YAAAE,cAAA,SAAcC,GAAd,WACE,QADY,IAAAA,OAAA,GACPZ,KAAKa,KAAV,CAEA,IAAMC,EAAMd,KAAKa,KAgBXE,EAASH,EAAS,KAAO,iBAfhB,CACb,QACA,SACA,OACA,QACA,OACA,gBACA,OACA,WACA,aACA,oBACA,oBACA,WACA,WAGKI,SAAQ,SAACC,GACdH,EAAIC,GACFE,GACA,SAACC,GAAa,SAAKC,wBAA0B,EAAKA,uBAAuBD,EAA3D,SAIbN,UACIZ,KAAKmB,yBAQhB,YAAAC,aAAA,WACE,GAAKpB,KAAKqB,UAGV,OADQ,eAAAf,OACMC,oBAShB,YAAAe,KAAA,SAAKC,EAAiBC,GACfxB,KAAKqB,WAEVrB,KAAKqB,UAAUI,YAAYH,KAAKC,EAASC,IAU3C,YAAAE,GAAA,SAAGH,EAAiBI,EAAcC,GAAlC,WACE,GAAK5B,KAAKqB,UAAV,CAEA,GAAIM,EAAI,CACN,GAAI3B,KAAKC,WAAWsB,GAClB,MAAM,IAAIM,MAAM,WAAaN,EAAU,oBAGzCvB,KAAKC,WAAWsB,GAAWI,EAG7B3B,KAAKqB,UAAUI,YAAYG,EAAS,OAAS,MAC3CL,GACA,SAACN,EAAYO,GACX,EAAKvB,WAAWsB,IAAY,EAAKtB,WAAWsB,GAASC,GAMrDI,GAAU,EAAKE,OAAOP,QAU5B,YAAAO,OAAA,SAAOP,GACAvB,KAAKqB,WAENE,GAAWvB,KAAKC,WAAWsB,KAC7BvB,KAAKqB,UAAUI,YAAYM,eACzBR,EACAvB,KAAKC,WAAWsB,WAEXvB,KAAKC,WAAWsB,KAQ3B,YAAAS,UAAA,sBACOhC,KAAKqB,WAEKlB,OAAO8B,KAAKjC,KAAKC,YACzBe,SAAQ,SAAAO,GAIT,EAAKtB,WAAWsB,KAClB,EAAKF,UAAUI,YAAYM,eACzBR,EACA,EAAKtB,WAAWsB,WAEX,EAAKtB,WAAWsB,QAS7B,YAAAW,YAAA,WACE,OAAOlC,KAAKa,MAAQb,KAAKa,KAAKqB,eAQhC,YAAAC,aAAA,SAAaD,GACXlC,KAAKa,MAAQb,KAAKa,KAAKsB,aAAaD,IAQtC,YAAAE,WAAA,SAAWC,GACTrC,KAAKa,MAAQb,KAAKa,KAAKuB,WAAWC,IAOpC,YAAAC,SAAA,WACEtC,KAAKa,MAAQb,KAAKa,KAAKyB,YAOzB,YAAAC,SAAA,WACEvC,KAAKa,MAAQb,KAAKa,KAAK0B,YAOzB,YAAAC,WAAA,WACExC,KAAKa,MAAQb,KAAKa,KAAK2B,cASzB,YAAAC,eAAA,SAAeC,EAAeC,GAC5B3C,KAAKa,MAAQb,KAAKa,KAAK4B,eAAeC,EAAOC,IAS/C,YAAAC,QAAA,SAAQF,EAAeC,GACrB3C,KAAKa,MAAQb,KAAKa,KAAK+B,QAAQF,EAAOC,IAOxC,YAAAE,QAAA,WACE,OAAO7C,KAAKa,MAAQb,KAAKa,KAAKgC,WAShC,YAAAC,YAAA,SAAYC,EAAWC,GACrBhD,KAAKa,MAAQb,KAAKa,KAAKiC,YAAYC,EAAGC,IAOxC,YAAAC,YAAA,WACE,OAAOjD,KAAKa,KAAOb,KAAKa,KAAKoC,cAAgB,IAQ/C,YAAAC,cAAA,SAAcC,GACZnD,KAAKa,MAAQb,KAAKa,KAAKqC,cAAcC,IAOvC,YAAAC,KAAA,WACEpD,KAAKa,MAAQb,KAAKa,KAAKuC,QAQzB,YAAAC,MAAA,WACErD,KAAKa,MAAQb,KAAKa,KAAKwC,SAOzB,YAAAC,UAAA,WACEtD,KAAKgC,aAET,EA3SA,G,spBCEMuB,EAAW,EAAQ,iCAazB,SAASC,EAAcC,GAErB,IAAMC,EAAOD,EAAOE,UAAUC,qBAE9BH,EAAOE,UAAUC,qBAAuB,W,IAAU,sDAChDF,GAAQA,EAAKG,MAAM7D,KAAMwB,GACzBxB,KAAK8D,UAAW,GAIlB,IAAMC,EAAWN,EAAOE,UAAUI,SAClCN,EAAOE,UAAUI,SAAW,W,IAAU,sDAChC/D,KAAK8D,UACTC,EAASF,MAAM7D,KAAMwB,IAKzB,kBAGE,WAAYwC,GAAZ,MACE,YAAMA,IAAM,K,OA4Cd,EAAAC,MAAQ,SAAC1C,EAAiBC,GACxB,EAAK0C,UAAU5C,KAAKC,EAASC,IAI/B,EAAA2C,IAAM,SAAC5C,EAAiBI,GACtB,EAAKuC,UAAUxC,GAAGH,EAASI,IAI7B,EAAAyC,MAAQ,SAAC7C,EAAiBI,GACxB,EAAKuC,UAAUxC,GAAGH,EAASI,GAAI,IAIjC,EAAA0C,QAAU,SAAC9C,GACT,EAAK2C,UAAUpC,OAAOP,IAoCxB,EAAA+C,eAAiB,SAAC1D,QAAA,IAAAA,OAAA,GAChB,EAAKsD,UAAUvD,cAAcC,IAI/B,EAAA2D,uBAAyB,SAAC5C,GACxBA,IAAO,EAAKuC,UAAU/C,uBAAyBQ,IAIjD,EAAA6C,OAAS,SAACC,EAAiBC,EAAsBC,GAC/C,YADyB,IAAAD,MAAA,MAClB,IAAIE,SAAQ,SAACC,EAASC,GAC3B,EAAKb,MAAMV,EAASwB,YAAa,CAC/BC,KAAM,QACNN,MAAK,EACLD,QAAO,EACPE,KAAI,IAIN,EAAKP,MAAMb,EAAS0B,gBAAgB,SAACzD,GACnCqD,EAAQrD,EAAKmD,aAWnB,EAAAO,SAAW,SAACT,EAAiBC,EAAsBC,GACjD,YAD2B,IAAAD,MAAA,MACpB,IAAIE,SAAQ,SAACC,EAASC,GAC3B,EAAKb,MAAMV,EAASwB,YAAa,CAC/BC,KAAM,UACNN,MAAK,EACLD,QAAO,EACPE,KAAI,IAON,EAAKP,MAAMb,EAAS0B,gBAAgB,SAACzD,GACnC,EAAK6C,QAAQd,EAAS4B,eACtBN,EAAQrD,EAAKmD,SAIf,EAAKP,MAAMb,EAAS4B,eAAe,SAAC3D,GAClC,EAAK6C,QAAQd,EAAS0B,gBACtBH,EAAOtD,EAAKmD,aAQlB,EAAAS,aAAe,SAACC,EAAaC,EAAoBC,GAC/C,QAD+C,IAAAA,OAAA,GACzB,oBAAXrF,OAAwB,OAAOmF,EAE1C,IAAIG,EAAW,GACfF,GAASnF,OAAO8B,KAAKqD,GAAOtE,SAAQ,SAAAyE,GAClCD,IAAeA,EAAW,IAAM,IAAKC,EAAG,IAAIH,EAAMG,MAKpD,IAAMC,EAAS,cAIf,OAHAF,EAAW,IAAMA,GACjBA,EAAWE,GAAUH,EAAY,YAAgBC,EAAUE,GAAUF,GAGjE,KAAKG,KAAKN,GAAUA,EAAG,IAAIG,EAASI,OAAO,EAAGJ,EAASK,QAAYR,EAAMG,EACzEH,GAIN,EAAAS,MAAQ,SAAC,G,IAAET,EAAA,EAAAA,IAAK3C,EAAA,EAAAA,MAAOC,EAAA,EAAAA,OAAQoD,EAAA,EAAAA,GACP,oBAAX7F,QAEX,EAAK+D,MAAMV,EAASyC,gBAAiB,CACnCX,IAAG,EACH3C,MAAK,EACLC,OAAM,EACNoD,GAAE,KAKN,EAAAE,aAAe,SAACZ,GACQ,oBAAXnF,QAEX,EAAK+D,MAAMV,EAAS2C,iBAAkBb,IAIxC,EAAAc,MAAQ,WACN,EAAKjC,UAAUd,QAIjB,EAAAgD,UAAY,WACV,EAAKlC,UAAU5B,YAIjB,EAAA+D,UAAY,WACV,EAAKnC,UAAU3B,YAIjB,EAAA+D,gBAAkB,SAAC5D,EAAeC,GAChC,EAAKuB,UAAUoC,gBAAgB5D,EAAOC,IAIxC,EAAA4D,YAAc,WACZ,EAAKrC,UAAU1B,cAIjB,EAAAgE,OAAS,WACP,EAAKtC,UAAUb,SAIjB,EAAAoD,eAAiB,SAACtD,GAChB,EAAKe,UAAUhB,cAAcC,IAI/B,EAAAuD,cAAgB,WACd,OAAO,EAAKxC,UAAU9C,gBAIxB,EAAAuF,SAAW,SAACjE,EAAeC,GACpB,EAAKuB,UAAUhC,cAKlB,EAAKgC,UAAUtB,QAAQF,EAAOC,IAJ9B,EAAKuB,UAAU/B,cAAa,GAC5B,EAAK+B,UAAUtB,QAAQF,EAAOC,GAC9B,EAAKuB,UAAU/B,cAAa,KAOhC,EAAAyE,SAAW,WACT,OAAO,EAAK1C,UAAU0C,YAIxB,EAAAC,aAAe,SAAC9D,EAAWC,GACzB,EAAKkB,UAAU2C,aAAa9D,EAAGC,IAIjC,EAAA8D,aAAe,WACb,OAAO,EAAK5C,UAAU4C,gBA/PtB,EAAK5C,UAAY,IAAI,E,EAiQzB,OAxQiF,OAW/E,YAAA6C,kBAAA,W,IAAkB,sDAChB,OAAO/G,KAAKgH,SAASnD,MAAM7D,KAAMwB,IAGnC,YAAAwF,SAAA,W,IAAS,uDAGT,YAAAC,mBAAA,W,IAAmB,sDACjB,OAAOjH,KAAKkH,UAAUrD,MAAM7D,KAAMwB,IAGpC,YAAA0F,UAAA,W,IAAU,uDAGV,YAAAC,OAAA,WACE,OAAOnH,KAAKoH,QAAQvD,MAAM7D,OAG5B,YAAAoH,QAAA,WACE,OACE,gBAAC,WAAQ,iBAOb,YAAAxD,qBAAA,W,IAAqB,sDAGnB,OADA5D,KAAKkE,UAAUZ,YACRtD,KAAKqH,YAAYxD,MAAM7D,KAAMwB,IAGtC,YAAA6F,YAAA,W,IAAY,uDA0BZ,YAAAC,YAAA,SAAYjC,GACV,IAAIkC,EAEJ,OAAO,IAAI3C,SAAQ,SAACC,EAASC,GAC3B,IAAM0C,EAAOC,SAASC,cAAc,QAC9BC,EAAWF,SAASG,cAAc,UACpCC,GAAe,EACnBF,EAASG,IAAMzC,EACfsC,EAASI,OAAS,WAChBP,GAAQA,EAAKQ,YAAYL,GACzBM,aAAaV,GACTM,IAGJA,GAAe,EACfhD,MAEF2C,GAAQA,EAAKU,YAAYP,GAEzBJ,EAAWrH,OAAeiI,YAAW,WAC/BN,IAGJ/C,IACA+C,GAAe,KACd,SA/FYO,EAAc,GADlC5E,GACoB4E,GAArB,CAAiF,aAA5D,O,2kBC5BfC,EAAW,EAAQ,iBAEnB9E,EAAW,EAAQ,iCAIzB,yE,OAIE,EAAA+E,MAAQ,CACNC,gBAAiB,KACjBC,cAAe,KACfC,aAAa,EACbC,WAAW,EACXC,cAAc,GA0DhB,EAAAC,QAAU,SAACd,GACT,EAAKe,UAAY,EAAKA,SAASC,OAAO,CACpCpE,MAAO,aACPqE,QAAQ,EACRjB,IAAG,EACHkB,MAAO,SAACC,GAAQ,SAAKC,eAAL,OAIpB,EAAAA,eAAiB,SAACC,GACR,IAAAZ,EAAA,QAAAA,gBACAa,EAAA,EAAAA,QAERD,EAAYzH,GAAG,SAAS,SAACuH,GACnBV,EACFA,EAAgBc,UAEhB,EAAKC,iBAITF,EAAQG,iBAAiB,aAAa,WACpCJ,EAAYK,SAASJ,EAAQK,YAG7BL,EAAQM,UACN,wXAiBEnB,GACFA,EAAgBc,UAChBd,EAAgBoB,gBAAgBR,EAAYF,IAAK,MAEjD,EAAKK,iBAITF,EAAQG,iBAAiB,cAAc,SAACrI,GACtC0I,QAAQC,IAAI3I,GACZ,EAAK0H,QAAQ1H,EAAEmE,QAGjB+D,EAAQG,iBAAiB,iBAAiB,W,IAAC,sDACzCK,QAAQC,IAAI,cAAerI,OAI/B,EAAA8H,YAAc,WACZ,mDAAkBQ,MAAK,SAACC,GACtB,IACMxB,EAAkB,IAAIyB,EADZD,EAAQE,SACY,EAAKC,KAAKH,QAAS,CAErDI,YAAY,EACZC,SAAS,EACTC,gBAAgB,IAGlB,EAAKtG,SAAS,CAAEwE,gBAAe,QAInC,EAAA+B,YAAc,SAACC,GACb,IAAMxJ,EAASwJ,EAAO,YAAc,cAEpC,EAAKxG,SAAS,CAAE0E,YAAa8B,IAAQ,WACnC,EAAKxJ,MAEJwJ,GAAQ,EAAK5D,SAAS,IAAQjE,MAAO,IAAQC,YAIlD,EAAA6H,cAAgB,WACR,cAAEhC,EAAA,EAAAA,cAAeE,EAAA,EAAAA,UAAWC,EAAA,EAAAA,aAElC,OACE,sBAAI8B,UAAU,mBACZ,sBACEA,UAAW,iBAAmB/B,EAAY,GAAK,oBAC/CgC,MAAO,CAAEC,YAAa,OACtBC,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,OAAArC,GAAiBA,EAAjB,WAEf,qBAAGiC,UAAU,sBAEf,sBACEA,UAAW,iBAAmB9B,EAAe,GAAK,oBAClDiC,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,OAAArC,GAAiBA,EAAjB,cAEf,qBAAGiC,UAAU,uBAEf,sBACEA,UAAW,eACXG,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,OAAArC,GAAiBA,EAAjB,WAEf,qBAAGiC,UAAU,4BAMrB,EAAAK,iBAAmB,WACT,IAAArC,EAAA,QAAAA,YACR,OACE,sBAAIgC,UAAU,mBACZ,sBACEA,UAAU,YACVC,MAAO,CAAEC,YAAa,OACtBC,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,uBAEf,qBAAGJ,UAAW,8BAEhB,sBACEA,UAAU,YACVC,MAAO,CAAEC,YAAa,OACtBC,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,SAAKP,aAAL,KAEf,qBAAGG,UAAW,aAAehC,EAAc,oBAAsB,uBAEnE,sBACEgC,UAAU,YACVG,YAAa,SAAA1J,GAAK,OAAAA,EAAA,mBAClB2J,QAAS,WAAM,oBAEf,qBAAGJ,UAAW,8B,EAsBxB,OAtOqC,OAYnC,YAAAzD,SAAA,sBACEhH,KAAKmE,IAAIZ,EAAS2C,kBAAkB,SAAA1E,GAClC,EAAKoH,QAAQpH,EAAKmD,SAGpB,IAAMkE,EAAW7I,KAAK6I,SAAW,IAAIR,EAAS,IAO9CQ,EAASnH,GAAG,aAAa,SAACuH,GAExBA,EAAIvH,GAAG,YAAY,SAACuH,GAClBd,YAAW,WACD,IAAAK,EAAA,QAAAA,cACR,EAAKzE,SAAS,CACZ2E,UAAWF,EAAcE,YACzBC,aAAcH,EAAcG,uBAKlCM,EAAIG,QAAQG,iBAAiB,aAAa,WACxC,EAAKxF,SAAS,CACZ2E,UAAWO,EAAIG,QAAQV,YACvBC,aAAcM,EAAIG,QAAQT,iBAE5BM,EAAIG,QAAQG,iBAAiB,wBAAwB,WACnD,EAAKxF,SAAS,CACZ2E,UAAWO,EAAIG,QAAQV,YACvBC,aAAcM,EAAIG,QAAQT,0BAOlCE,EAASnH,GAAG,cAAc,SAACuH,EAAKJ,GAC9B,EAAK9E,SAAS,CACZyE,cAAeS,EAAIG,UAEb,IAAAb,EAAA,QAAAA,gBACJA,GACFA,EAAgBoB,gBAAgBV,EAAIA,IAAK,QAK7CJ,EAASnH,GAAG,eAAe,SAACuH,EAAK8B,IAC9BA,EAAMC,KAAKnF,QAAU,EAAKW,aAuJ/B,YAAAY,QAAA,WACE,OACE,gBAAC,WAAQ,KACP,uBAAKqD,UAAU,kBACZzK,KAAKwK,gBACN,uBAAKC,UAAU,yBAAyBQ,IAAI,WAC1C,uBAAKR,UAAU,gBAGjB,uBAAKA,UAAU,UACdzK,KAAK8K,oBAER,uBAAKL,UAAU,kBAIvB,EAtOA,CAAqC,K,iXCfrC,0GAAMnF,EAAQ,EAAQ,gBAEhB4F,EAAe,0BACfC,EAAqB,yBAMrB,SAAUC,EAAkB/F,GAChC,MAAsB,oBAAXnF,OAA+B,GACnCmL,EAAgBhG,GAAOnF,OAAOoL,SAASC,MAAQ,IA8BlD,SAAUF,EAAgB3F,EAAgBjC,QAAA,IAAAA,MAAA,IAC9C,IAAM+H,EAvBF,SAA0B9F,EAAgBjC,QAAA,IAAAA,MAAA,IAC9C,IAAMgI,EAAa/F,EAAOgG,MAAMR,GAC1BS,EAAclI,EAAOiI,MAAMR,GAC3BU,EAAc,SAACF,GACnB,IAAMF,EAAM,GAOZ,OALAE,GAASA,EAAM1K,SAAQ,SAAA6K,GACrB,IAAMC,EAAID,EAAIH,MAAMP,GACpBW,IAAMN,EAAIM,EAAE,IAAMA,EAAE,OAGfN,GAGT,OAAOrL,OAAO4L,OAAOH,EAAYD,GAAcC,EAAYH,IAS/CO,CAAgBtG,EAAQjC,GAEhC+B,EAAW,GAKf,OAJArF,OAAO8B,KAAKuJ,GAAKxK,SAAQ,SAAAyE,GACvBD,IAAeA,EAAW,IAAM,IAAKC,EAAG,IAAI+F,EAAI/F,MAG3CD,EAAW,IAAMA,EAAW,GAO/B,SAAUyG,EAAWvG,GACzB,OAAIA,EACKJ,EAAM4G,MAAMxG,GACQ,oBAAXxF,OACT,GAEAoF,EAAM4G,MAAMd","file":"3.renderer.prod.js","sourcesContent":["import { BrowserWindow } from 'electron';\n\nexport type CallBack = (event: any, args: any) => void;\n\nexport default class RendererProcess {\n  /** 单例模式（仅适用于单线程） */\n  static _instance: RendererProcess;\n\n  static getInstance(): RendererProcess {\n    if (!this._instance) {\n      this._instance = new RendererProcess();\n    }\n\n    return this._instance;\n  }\n\n  private _electron?: any;\n  private _win: BrowserWindow;\n  private _allEvents: IAnyObject;\n\n  _onWindowStatusChanged?: (e: Event, status: string) => void;\n\n  constructor() {\n    this._allEvents = {};\n\n    /** 判断是否处于浏览器环境 */\n    if (typeof window === 'undefined') return;\n\n    /** 防止初始化时electron还没有加载完成 */\n    Object.defineProperty(this, '_win', {\n      get() {\n        const { remote } = require('electron');\n        return remote.getCurrentWindow();\n      }\n    });\n\n    Object.defineProperty(this, '_electron', {\n      get() {\n        return require('electron');\n      }\n    });\n  }\n\n  /**\n   * @description: 窗口添加事件：https://electronjs.org/docs/api/browser-window#%E5%AE%9E%E4%BE%8B%E4%BA%8B%E4%BB%B6\n   * @param {boolean} isBind\n   * @return: void\n   */\n  bindWinEvents(isBind: boolean = true): void {\n    if (!this._win) return;\n\n    const win = this._win;\n    const events = [\n      'close', // 在窗口要关闭的时候触发。 它在DOM 的beforeunload 和 unload 事件之前触发. 调用event.preventDefault()将阻止这个操作。\n      'closed', // 窗口已经关闭时触发。当你接收到这个事件的时候, 你应当删除对已经关闭的窗口的引用对象和避免再次使用它.\n      'blur', // 当窗口失去焦点时触发\n      'focus', // 当窗口获得焦点时触发\n      'show', // 当窗口显示时触发\n      'ready-to-show', // 当页面已经渲染完成(但是还没有显示) 并且窗口可以被显示时触发\n      'hide', // 当窗口隐藏时触发\n      'maximize', // 窗口最大化时触发\n      'unmaximize', // 当窗口从最大化状态退出时触发\n      'enter-full-screen', // 窗口进入全屏状态时触发\n      'leave-full-screen', // 窗口离开全屏状态时触发\n      'minimize', // 窗口最小化时触发\n      'restore' // 当窗口从最小化状态恢复时触发\n    ]\n    const method = isBind ? 'on' : 'removeListener';\n    events.forEach((event: any) => {\n      win[method](\n        event,\n        (e: Event) => this._onWindowStatusChanged && this._onWindowStatusChanged(e, event)\n      );\n    });\n\n    if (!isBind) {\n      delete this._onWindowStatusChanged;\n    }\n  }\n\n  /**\n   * @description: 获取当前窗口对象\n   * @return: 当前窗口对象\n   */\n  geCurrentWin(): BrowserWindow {\n    if (!this._electron) return;\n\n    const { remote } = this._electron;\n    return remote.getCurrentWindow();\n  }\n\n  /**\n   * @description: 渲染线程往主线程中发送channel\n   * @param {string} channel  事件名\n   * @param {any} args  参数\n   * @return: void\n   */\n  send(channel: string, args: any): void {\n    if (!this._electron) return;\n\n    this._electron.ipcRenderer.send(channel, args);\n  }\n\n  /**\n   * @description: 往渲染线程中注册事件\n   * @param {string} channel  事件名\n   * @param {CallBack} cb  执行事件的回调方法\n   * @param {boolean} isOnce  是否注册一次性的事件\n   * @return: void\n   */\n  on(channel: string, cb: CallBack, isOnce?: boolean): void {\n    if (!this._electron) return;\n\n    if (cb) {\n      if (this._allEvents[channel]) {\n        throw new Error('event: [' + channel + '] has been bind!');\n      }\n\n      this._allEvents[channel] = cb;\n    }\n\n    this._electron.ipcRenderer[isOnce ? 'once' : 'on'](\n      channel,\n      (event: any, args: any) => {\n        this._allEvents[channel] && this._allEvents[channel](args);\n\n        /** 如果只执行一次，则执行后清除 */\n        /** 用once注册过的事件 第一次触发执行之后默认会被移除：https://electronjs.org/docs/api/ipc-renderer#ipcrendereroncechannel-listener\n         * 这里执行remove强制移除 保证一定被移除\n         */\n        isOnce && this.remove(channel);\n      }\n    );\n  }\n\n  /**\n   * @description: 从渲染线程中移除注册过的事件\n   * @param {string} channel  渲染线程注册过的事件名\n   * @return: void\n   */\n  remove(channel: string): void {\n    if (!this._electron) return;\n\n    if (channel && this._allEvents[channel]) {\n      this._electron.ipcRenderer.removeListener(\n        channel,\n        this._allEvents[channel]\n      );\n      delete this._allEvents[channel];\n    }\n  }\n\n  /**\n   * @description: 一次性清楚渲染线程中注册过的channel\n   * @return: void\n   */\n  removeAll(): void {\n    if (!this._electron) return;\n\n    const events = Object.keys(this._allEvents);\n    events.forEach(channel => {\n      /** 也可使用removeAllListeners一次性清楚所有注册过的channel\n      * https://electronjs.org/docs/api/ipc-renderer#ipcrendererremovealllistenerschannel\n      */\n      if (this._allEvents[channel]) {\n        this._electron.ipcRenderer.removeListener(\n          channel,\n          this._allEvents[channel]\n        );\n        delete this._allEvents[channel];\n      }\n    });\n  }\n\n  /**\n   * @description: 当前窗口是否可以被用户改变窗口大小\n   * @return: boolean\n   */\n  isResizable(): boolean {\n    return this._win && this._win.isResizable();\n  }\n\n  /**\n   * @description: 设置用户是否可以手动调整窗口大小\n   * @param {boolean} isResizable 是否可以手动调整窗口大小\n   * @return: void\n   */\n  setResizable(isResizable: boolean): void {\n    this._win && this._win.setResizable(isResizable);\n  }\n\n  /**\n   * @description: 设置窗口是否可由用户移动 在 Linux 上无效\n   * @param {boolean} isMovalble  是否可被移动\n   * @return: void\n   */\n  setMovable(isMovalble: boolean): void {\n    this._win && this._win.setMovable(isMovalble);\n  }\n\n  /**\n   * @description: 窗口最小化\n   * @return: void\n   */\n  minimize(): void {\n    this._win && this._win.minimize();\n  }\n\n  /**\n   * @description: 窗口最大化\n   * @return: void\n   */\n  maximize(): void {\n    this._win && this._win.maximize();\n  }\n\n  /**\n   * @description: 取消窗口最大化\n   * @return: void\n   */\n  unmaximize(): void {\n    this._win && this._win.unmaximize();\n  }\n\n  /**\n   * @description: 设置窗口最大化的 width 和 height\n   * @param {number} width 宽\n   * @param {number} height 高\n   * @return: void\n   */\n  setMaximumSize(width: number, height: number): void {\n    this._win && this._win.setMaximumSize(width, height);\n  }\n\n  /**\n   * @description: 将窗口的大小调整为width和height. 如果width或height低于设定的最小值, 那么对应的大小将被截断至设定的最小值.\n   * @param {number} width 宽\n   * @param {number} height 高\n   * @return: void\n   */\n  setSize(width: number, height: number) {\n    this._win && this._win.setSize(width, height);\n  }\n\n  /**\n   * @description: 返回 Integer []-包含窗口的宽度和高度。\n   * @return: Integer []\n   */\n  getSize(): number[] {\n    return this._win && this._win.getSize();\n  }\n\n  /**\n   * @description: 将窗口移动到 x 和 y\n   * @param {number} x 坐标x轴的值\n   * @param {number} y 坐标y轴的值\n   * @return: void\n   */\n  setPosition(x: number, y: number): void {\n    this._win && this._win.setPosition(x, y);\n  }\n\n  /**\n   * @description: 返回 Integer[] - 返回一个包含当前窗口位置的数组.\n   * @return: number[]\n   */\n  getPosition(): number[] {\n    return this._win ? this._win.getPosition() : [];\n  }\n\n  /**\n   * @description: 设置窗口是否应处于全屏模式\n   * @param {boolean} isFull  是否应处于全屏模式\n   * @return: void\n   */\n  setFullScreen(isFull: boolean): void {\n    this._win && this._win.setFullScreen(isFull);\n  }\n\n  /**\n   * @description: 隐藏窗口\n   * @return: void\n   */\n  hide(): void {\n    this._win && this._win.hide();\n  }\n\n  /**\n   * @description: 尝试关闭窗口。这与用户手动点击窗口的关闭按钮效果相同。但页面也可以取消关闭\n   * https://electronjs.org/docs/api/browser-window#%E4%BA%8B%E4%BB%B6%EF%BC%9A-close\n   * @return: void\n   */\n  close(): void {\n    this._win && this._win.close();\n  }\n\n  /**\n   * @description: 一次性清楚渲染线程中注册过的channel\n   * @return: void\n   */\n  destroyed(): void {\n    this.removeAll();\n  }\n}\n","import { BrowserWindow, Event } from 'electron';\nimport * as React from 'react';\nimport { Component, Fragment } from 'react';\nimport RendererProcess, { CallBack } from 'app/renderer-process';\nimport { getLocationSearch, queryMergeToStr } from 'app/utils';\n\nconst listener = require('constants/listener.json');\n\ninterface OpenArgs {\n  url: string;\n  width?: number;\n  height?: number;\n  id?: string;\n}\n\n/**\n * @description: 检测组件是否已经销毁，防止setState内存溢出 https://segmentfault.com/a/1190000017186299\n * @param {any} target  当前组件实例\n */\nfunction injectUnmount(target: any) {\n  /** 改装componentWillUnmount，销毁的时候记录一下 */\n  const next = target.prototype.componentWillUnmount;\n\n  target.prototype.componentWillUnmount = function (...args: any[]) {\n    next && next.apply(this, args);\n    this._unmount = true;\n  }\n\n  /** 对setState的改装，setState查看目前是否已经销毁 */\n  const setState = target.prototype.setState;\n  target.prototype.setState = function (...args: any[]) {\n    if (this._unmount) return;\n    setState.apply(this, args);\n  }\n}\n\n@injectUnmount\nexport default class BasicComponent<Props = {}, State = {}, Other = any> extends Component<Props, State, Other> {\n  $renderer: any;\n\n  constructor(props: Props) {\n    super(props);\n\n    // 实例化RendererProcess渲染进程监听函数\n    this.$renderer = new RendererProcess();\n  }\n\n  /** 重命名componentDidMount 让BasicComponent与React的Component生命周期区分开 */\n  componentDidMount(...args: any) {\n    return this.didMount.apply(this, args);\n  }\n\n  didMount(...args: any[]) { }\n\n  /** 重命名componentDidUpdate 让BasicComponent与React的Component生命周期区分开 */\n  componentDidUpdate(...args: any) {\n    return this.didUpdate.apply(this, args);\n  }\n\n  didUpdate(...args: any[]) { }\n\n  /** 重命名render 让BasicComponent与React的Component render分开 */\n  render() {\n    return this.$render.apply(this);\n  }\n\n  $render() {\n    return (\n      <Fragment>\n        $render\n      </Fragment>\n    )\n  }\n\n  /** 改造componentWillUnmount */\n  componentWillUnmount(...args: any) {\n    // 移除所有的channel\n    this.$renderer.destroyed();\n    return this.willUnmount.apply(this, args);\n  }\n\n  willUnmount(...args: any[]) { }\n\n  /** 使用箭头函数 防止出现this丢失问题 不需要每个函数都bind(this) */\n  /** 渲染线程往主线程中发送channel */\n  $send = (channel: string, args?: any): void => {\n    this.$renderer.send(channel, args);\n  }\n\n  /** 往渲染线程中注册channel */\n  $on = (channel: string, cb: CallBack): void => {\n    this.$renderer.on(channel, cb);\n  }\n\n  /** 往渲染线程中注册一次性channel */\n  $once = (channel: string, cb: CallBack): void => {\n    this.$renderer.on(channel, cb, true);\n  }\n\n  /** 从渲染线程中移除注册过的channel */\n  $remove = (channel: string): void => {\n    this.$renderer.remove(channel);\n  }\n\n  /** react组件中加载js脚本\n   * 参考：https://github.com/threepointone/react-loadscript/blob/master/src/index.js\n   */\n  $loadScript(url: string) {\n    let timeout: number;\n\n    return new Promise((resolve, reject) => {\n      const head = document.querySelector('head');\n      const elScript = document.createElement('script');\n      let loadFinished = false;\n      elScript.src = url;\n      elScript.onload = () => {\n        head && head.removeChild(elScript);\n        clearTimeout(timeout);\n        if (loadFinished) {\n          return;\n        }\n        loadFinished = true;\n        resolve();\n      };\n      head && head.appendChild(elScript);\n\n      timeout = (window as any).setTimeout(() => {\n        if (loadFinished) {\n          return;\n        }\n        reject();\n        loadFinished = true;\n      }, 10 * 1e3); // 10秒超时\n    });\n  }\n\n  /** 往当前窗口添加窗口状态变化的事件 */\n  $bindWinEvents = (isBind: boolean = true): void => {\n    this.$renderer.bindWinEvents(isBind);\n  }\n\n  /** 绑定窗口事件的回调函数 */\n  $onWindowStatusChanged = (cb: (event: Event, status: string) => void) => {\n    cb && (this.$renderer._onWindowStatusChanged = cb);\n  }\n\n  /** 打开alert弹窗 */\n  $alert = (message: string, title: string = '弹窗', data?: IAnyObject) => {\n    return new Promise((resolve, reject) => {\n      this.$send(listener.DIALOG_SHOW, {\n        type: 'alert',\n        title,\n        message,\n        data\n      });\n\n      /** 点击弹窗确认按钮 */\n      this.$once(listener.DIALOG_CONFIRM, (args: any) => {\n        resolve(args.data);\n      });\n\n      /** 点击弹窗取消按钮 */\n      // this.$once(listener.DIALOG_CANCEL, (args: any) => {\n      //   reject(args.data);\n      // });\n    });\n  }\n\n  /** 打开confirm弹窗 */\n  $confirm = (message: string, title: string = '弹窗', data?: IAnyObject) => {\n    return new Promise((resolve, reject) => {\n      this.$send(listener.DIALOG_SHOW, {\n        type: 'confirm',\n        title,\n        message,\n        data\n      });\n\n      /** 这里需要注意 因为confirm弹窗中只能点击取消或者确认按钮 所以肯定有一个channel不会被触发 所以不会被移除 下次打开的时候有一个会报重复注册channel的错误\n       *  所以在各自的回调中去帮忙移除另一个的channel\n       */\n      /** 点击弹窗确认按钮 */\n      this.$once(listener.DIALOG_CONFIRM, (args: any) => {\n        this.$remove(listener.DIALOG_CANCEL);\n        resolve(args.data);\n      });\n\n      /** 点击弹窗取消按钮 */\n      this.$once(listener.DIALOG_CANCEL, (args: any) => {\n        this.$remove(listener.DIALOG_CONFIRM);\n        reject(args.data);\n      });\n    });\n  }\n\n  /**\n   * 将当前访问的search附加至传入的url上\n   */\n  $addUrlQuery = (url: string, query?: IAnyObject, addSearch: boolean = true) => {\n    if (typeof window === 'undefined') return url;\n\n    let queryStr = '';\n    query && Object.keys(query).forEach(key => {\n      queryStr += `${queryStr ? '&' : ''}${key}=${query[key]}`;\n    });\n\n\n\n    const search = getLocationSearch();\n    queryStr = '?' + queryStr;\n    queryStr = search && addSearch ? queryMergeToStr(queryStr, search) : queryStr;\n\n    return queryStr\n      ? /\\?/.test(url) ? `${url}&${queryStr.substr(1, queryStr.length)}` : url + queryStr\n      : url;\n  }\n\n  /** 打开新窗口 */\n  $open = ({ url, width, height, id }: OpenArgs) => {\n    if (typeof window === 'undefined') return;\n\n    this.$send(listener.CUSTOM_WIN_SHOW, {\n      url,\n      width,\n      height,\n      id\n    });\n  }\n\n  /** 内置浏览器打开指定url页面 */\n  $openBrowser = (url: string) => {\n    if (typeof window === 'undefined') return;\n\n    this.$send(listener.BROWSER_OPEN_URL, url);\n  }\n\n  /** 隐藏窗口 */\n  $hide = (): void => {\n    this.$renderer.hide();\n  }\n\n  /** 窗口最小化 */\n  $minimize = (): void => {\n    this.$renderer.minimize();\n  }\n\n  /** 窗口最大化 */\n  $maximize = (): void => {\n    this.$renderer.maximize();\n  }\n\n  /** 设置窗口最大化的 width 和 height */\n  $setMaximumSize = (width: number, height: number) => {\n    this.$renderer.$setMaximumSize(width, height);\n  }\n\n  /** 取消窗口最大化 */\n  $unmaximize = (): void => {\n    this.$renderer.unmaximize();\n  }\n\n  /** 关闭窗口 */\n  $close = (): void => {\n    this.$renderer.close();\n  }\n\n  /** 设置窗口是否应处于全屏模式 */\n  $setFullScreen = (isFull: boolean): void => {\n    this.$renderer.setFullScreen(isFull);\n  }\n\n  /** 获取当前窗口对象 */\n  $geCurrentWin = (): BrowserWindow => {\n    return this.$renderer.geCurrentWin();\n  }\n\n  /** 设置窗口尺寸 */\n  $setSize = (width: number, height: number) => {\n    if (!this.$renderer.isResizable()) {\n      this.$renderer.setResizable(true);\n      this.$renderer.setSize(width, height);\n      this.$renderer.setResizable(false);\n    } else {\n      this.$renderer.setSize(width, height);\n    }\n  }\n\n  /** 返回 Integer []-包含窗口的宽度和高度。 */\n  $getSize = (): number[] => {\n    return this.$renderer.$getSize();\n  }\n\n  /** 将窗口移动到 x 和 y */\n  $setPosition = (x: number, y: number) => {\n    this.$renderer.$setPosition(x, y);\n  }\n\n  /** 返回 Integer[] - 返回一个包含当前窗口位置的数组. */\n  $getPosition = (): number[] => {\n    return this.$renderer.$getPosition();\n  }\n}\n","import './browser.global.scss';\n\nimport * as React from 'react';\nimport { Fragment } from 'react';\n\nimport BasicComponent from \"components/BasicComponent\";\n// import { Tag } from 'antd';\nimport { BROWSER } from 'app/config';\n\nconst TabGroup = require('electron-tabs');\n\nconst listener = require('app/constants/listener.json');\n// const { Header, Content } = Layout;\n// const styles = require();\n\nexport default class Browser extends BasicComponent {\n  private tabGroup?: any;\n  // state: IDialog.state;\n\n  state = {\n    iscrollInstance: null,\n    activeWebView: null,\n    isMaximized: false,\n    canGoBack: false,\n    canGoForward: false\n  }\n\n  didMount() {\n    this.$on(listener.BROWSER_OPEN_URL, args => {\n      this.openUrl(args.data);\n    })\n\n    const tabGroup = this.tabGroup = new TabGroup({\n      /** 不展示新建窗口按钮 如需展示 设置newTab属性 */\n      // newTab: {\n      //   title: 'New Tab'\n      // }\n    });\n\n    tabGroup.on('tab-added', (tab) => {\n      /** tab失去焦点是触发 包括被close也会触发 */\n      tab.on('inactive', (tab) => {\n        setTimeout(() => {\n          const { activeWebView } = this.state;\n          this.setState({\n            canGoBack: activeWebView.canGoBack(),\n            canGoForward: activeWebView.canGoForward(),\n          })\n        })\n      });\n\n      tab.webview.addEventListener('dom-ready', () => {\n        this.setState({\n          canGoBack: tab.webview.canGoBack(),\n          canGoForward: tab.webview.canGoForward(),\n        })\n        tab.webview.addEventListener('did-navigate-in-page', () => {\n          this.setState({\n            canGoBack: tab.webview.canGoBack(),\n            canGoForward: tab.webview.canGoForward(),\n          })\n        });\n      });\n    })\n\n    /** 设置当前活动的webview */\n    tabGroup.on('tab-active', (tab, tabGroup) => {\n      this.setState({\n        activeWebView: tab.webview,\n      });\n      const { iscrollInstance } = this.state;\n      if (iscrollInstance) {\n        iscrollInstance.scrollToElement(tab.tab, 500);\n      }\n    });\n\n    /** 没有tab，则关闭窗口 */\n    tabGroup.on('tab-removed', (tab, group) => {\n      !group.tabs.length && this.$close();\n    });\n  }\n\n  openUrl = (src: string) => {\n    this.tabGroup && this.tabGroup.addTab({\n      title: 'loading...',\n      active: true,\n      src,\n      ready: (tab) => this.initTabWebView(tab),\n    });\n  }\n\n  initTabWebView = (tabInstance: any) => {\n    const { iscrollInstance } = this.state;\n    const { webview } = tabInstance;\n\n    tabInstance.on(\"close\", (tab) => {\n      if (iscrollInstance) {\n        iscrollInstance.refresh();\n      } else {\n        this.initIscroll();\n      }\n    });\n\n    webview.addEventListener('dom-ready', () => {\n      tabInstance.setTitle(webview.getTitle());\n\n      /** 重写滚动条样式 */\n      webview.insertCSS(\n        `\n          ::-webkit-scrollbar {\n            width: 6px;\n            height: 6px;\n            background: transparent;\n          }\n          ::-webkit-scrollbar-thumb {\n            background: rgba(0,0,0,0.1);\n            border-radius: 3px;\n          }\n          ::-webkit-scrollbar-thumb:hover {\n            background: rgba(0,0,0,0.2);\n          }\n        `\n      );\n\n      /** init iscroll */\n      if (iscrollInstance) {\n        iscrollInstance.refresh();\n        iscrollInstance.scrollToElement(tabInstance.tab, 500);\n      } else {\n        this.initIscroll();\n      }\n    });\n\n    webview.addEventListener('new-window', (e: any) => {\n      console.log(e);\n      this.openUrl(e.url);\n    });\n\n    webview.addEventListener('did-fail-load', (...args: any[]) => {\n      console.log('load failed', args);\n    });\n  }\n\n  initIscroll = () => {\n    import('iscroll').then((iscroll) => {\n      const IScroll = iscroll.default;\n      const iscrollInstance = new IScroll(this.refs.iscroll, {\n        // scrollbars: true,\n        mouseWheel: true,\n        scrollX: true,\n        preventDefault: false,\n      });\n\n      this.setState({ iscrollInstance });\n    });\n  }\n\n  setMaximize = (flag: boolean) => {\n    const method = flag ? '$maximize' : '$unmaximize';\n\n    this.setState({ isMaximized: flag }, () => {\n      this[method]();\n      /** 恢复大小需要重设尺寸 */\n      !flag && this.$setSize(BROWSER.width, BROWSER.height);\n    });\n  }\n\n  renderHistory = () => {\n    const { activeWebView, canGoBack, canGoForward } = this.state;\n\n    return (\n      <ul className=\"icons-container\">\n        <li\n          className={'icon-history ' + (canGoBack ? '' : 'history-disabled')}\n          style={{ marginRight: '2px' }}\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => activeWebView && activeWebView.goBack()}\n        >\n          <i className=\"iconfont iconpre\"></i>\n        </li>\n        <li\n          className={'icon-history ' + (canGoForward ? '' : 'history-disabled')}\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => activeWebView && activeWebView.goForward()}\n        >\n          <i className=\"iconfont iconnext\"></i>\n        </li>\n        <li\n          className={'icon-history'}\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => activeWebView && activeWebView.reload()}\n        >\n          <i className=\"iconfont iconshuaxin\"></i>\n        </li>\n      </ul>\n    );\n  }\n\n  renderController = () => {\n    const { isMaximized } = this.state;\n    return (\n      <ul className=\"icons-container\">\n        <li\n          className=\"icon-item\"\n          style={{ marginRight: '8px' }}\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => this.$minimize()}\n        >\n          <i className={'iconfont icontop-minimum'}></i>\n        </li>\n        <li\n          className=\"icon-item\"\n          style={{ marginRight: '8px' }}\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => this.setMaximize(!isMaximized)}\n        >\n          <i className={'iconfont ' + (isMaximized ? 'icontop-tonormal ' : 'icontop-maximize')}></i>\n        </li>\n        <li\n          className=\"icon-item\"\n          onMouseDown={e => e.stopPropagation()}\n          onClick={() => this.$close()}\n        >\n          <i className={'iconfont icontop-close'}></i>\n        </li>\n      </ul>\n    );\n  }\n\n  $render() {\n    return (\n      <Fragment>\n        <div className=\"etabs-tabgroup\">\n          {this.renderHistory()}\n          <div className=\"browser-tabs-container\" ref=\"iscroll\">\n            <div className=\"etabs-tabs\"></div>\n          </div>\n          {/* <div className=\"etabs-buttons\"></div> */}\n          <div className=\"empty\"></div>\n          {this.renderController()}\n        </div>\n        <div className=\"etabs-views\"></div>\n      </Fragment>\n    )\n  }\n}\n","const query = require('query-string');\n\nconst QUERY_REGEXP = /[?&]([^=&#]+)=([^&#]*)/g;\nconst SPLIT_QUERY_REGEXP = /[?&]([^=&#]+)=([^&#]*)/;\n\n/**\n * 获取url上的query字段\n * @param url\n */\nexport function getLocationSearch(url?: string) {\n  if (typeof window === 'undefined') return '';\n  return queryMergeToStr(url || window.location.href || '');\n}\n\n/**\n * merge query字符串返回对象\n * @param search\n * @param target\n */\nexport function queryMergeToObj(search: string, target: string = '') {\n  const matchQuery = search.match(QUERY_REGEXP);\n  const matchTarget = target.match(QUERY_REGEXP);\n  const getQueryObj = (match?: string[] | null) => {\n    const obj = {};\n\n    match && match.forEach(str => {\n      const v = str.match(SPLIT_QUERY_REGEXP);\n      v && (obj[v[1]] = v[2]);\n    });\n\n    return obj;\n  };\n\n  return Object.assign(getQueryObj(matchTarget), getQueryObj(matchQuery));\n}\n\n/**\n * merge query字符串返回search字符串（?xxx=xxx&xxx=xxx）\n * @param search\n * @param target\n */\nexport function queryMergeToStr(search: string, target: string = '') {\n  const obj = queryMergeToObj(search, target);\n\n  let queryStr = '';\n  Object.keys(obj).forEach(key => {\n    queryStr += `${queryStr ? '&' : ''}${key}=${obj[key]}`;\n  });\n\n  return queryStr ? '?' + queryStr : '';\n}\n\n/**\n * 格式化query\n * @param search\n */\nexport function queryParse(search?: string): IAnyObject {\n  if (search) {\n    return query.parse(search);\n  } else if (typeof window === 'undefined') {\n    return {};\n  } else {\n    return query.parse(getLocationSearch());\n  }\n}\n"],"sourceRoot":""}